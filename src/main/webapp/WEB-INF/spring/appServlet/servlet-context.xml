<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- 정적파일 경로 세팅 -->
	<!-- View(뷰)에서 이미지나 JS, CSS와 같은 정적리소스를 사용하는 경우
	Spring이 제공하는 디렉토리로 아래와 같이 매핑할 수 있다.
	즉, webapp하위의 resources 디렉토리를 3개의 별칭으로 매핑하여 사용할 수 있다. -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/static/**" location="/resources/" />
	<resources mapping="/images/**" location="/resources/" />

	<!-- ViewResolver를 통한 JSP 경로 세팅 -->
	<!-- 컨트롤러에서 JSP파일의 파일명을 반환하면 뷰리졸버가 받아 최종경로를 완성한다.
	prifix + JSP파일명 + suffix => /WEB-INF/views/파일명.jsp  -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 애플리케이션 시작시 자동으로 스캔할 기본패키지 지정 -->
	<!-- SpringMVC로 요청이 들어오면 제일 먼저 DisatcherServlet이
	그 요청을 받는다. 그리고 아래 설정된 기본패키지를 Scan(스캔)한 후
	@Controller 어노테이션이 설정된 클래스의 요청명이 매핑된 메서드를
	찾아 요청을 전달한다. 즉 요청을 전달할 컨트롤러 클래스를 찾는 역할을 한다. -->
	<context:component-scan base-package="com.edu.springbasic" />
	<context:component-scan base-package="autoscan" />
	
	<!-- servlet-context.xml파일은 스프링 웹애플리케이션이 최초로 실행될때 가장 먼저 동작하는 부분이므로
	별도의 설정이 없어도 아래에 기술한 빈(객체)은 자동으로 생성된다. -->
	<!-- 파일업로드를 위한 빈 생성 -->
	<!-- 디펜던시로 설정된 라이브러리 중에 spring-web-버전.jar에 포함된 클래스를 찾아서 경로를 복사한 후 class 속성에 기술한다. -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 업로드 할 파일의 최대용량 : 1Mb -->
		<beans:property name="maxUploadSize" value="1000000" />
	</beans:bean>
	
	<!-- 파일 다운로드를 위한 빈 생성 -->
	<!-- 우리가 직접 생성한 클래스를 기술한다. -->
	<beans:bean id="fileDownloadView" class="common.FileDownloadView" />
	
	<!-- spring-webmvc-버전.jar에 포함된 클래스를 기술한다. -->
	<beans:bean id="fileViewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="0" />
	</beans:bean>
	
</beans:beans>
